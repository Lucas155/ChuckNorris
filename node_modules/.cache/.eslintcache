[{"C:\\Users\\lucas\\OneDrive\\Área de Trabalho\\Gama\\chucknorris2.1\\src\\index.tsx":"1","C:\\Users\\lucas\\OneDrive\\Área de Trabalho\\Gama\\chucknorris2.1\\src\\App.tsx":"2","C:\\Users\\lucas\\OneDrive\\Área de Trabalho\\Gama\\chucknorris2.1\\src\\styles\\GlobalStyle.ts":"3","C:\\Users\\lucas\\OneDrive\\Área de Trabalho\\Gama\\chucknorris2.1\\src\\pages\\Home\\index.tsx":"4","C:\\Users\\lucas\\OneDrive\\Área de Trabalho\\Gama\\chucknorris2.1\\src\\pages\\Home\\style.ts":"5","C:\\Users\\lucas\\OneDrive\\Área de Trabalho\\Gama\\chucknorris2.1\\src\\service\\api.ts":"6"},{"size":209,"mtime":1616548268079,"results":"7","hashOfConfig":"8"},{"size":245,"mtime":1616548268061,"results":"9","hashOfConfig":"8"},{"size":586,"mtime":1616696112182,"results":"10","hashOfConfig":"8"},{"size":2743,"mtime":1616692481257,"results":"11","hashOfConfig":"8"},{"size":397,"mtime":1616692049683,"results":"12","hashOfConfig":"8"},{"size":127,"mtime":1616548268083,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1iel41n",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\lucas\\OneDrive\\Área de Trabalho\\Gama\\chucknorris2.1\\src\\index.tsx",[],["28","29"],"C:\\Users\\lucas\\OneDrive\\Área de Trabalho\\Gama\\chucknorris2.1\\src\\App.tsx",[],"C:\\Users\\lucas\\OneDrive\\Área de Trabalho\\Gama\\chucknorris2.1\\src\\styles\\GlobalStyle.ts",[],"C:\\Users\\lucas\\OneDrive\\Área de Trabalho\\Gama\\chucknorris2.1\\src\\pages\\Home\\index.tsx",["30"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport LoadGif from '../../img/giphy.gif';\r\nimport Chuck from '../../img/CHUCKNORRIS.gif';\r\nimport { HomeContainer } from './style';\r\nimport api from '../../service/api';\r\n\r\ninterface IJoke{\r\n    id: string;\r\n    icon_url: string;\r\n    value: string;\r\n}\r\n\r\nconst Home: React.FC = () => {\r\n    const [ categoriesJoke, setCategoriesJoke ] = useState([]);\r\n    const [ categorySelected, setCategorySelected ] = useState<IJoke>()\r\n    const [ searchJoke, setSearchJoke ] = useState('')\r\n    const [ isLoad, setIsLoad ] = useState(false)\r\n    const [ resultSearch, setResultSearch ] = useState<IJoke[]>([])\r\n\r\n\r\n    useEffect( () => {\r\n        api.get('jokes/categories').then(\r\n            response => {\r\n                setCategoriesJoke(response.data)\r\n            }\r\n        )\r\n    }, [])\r\n\r\n    async function handleJokes(){\r\n        setIsLoad(true)\r\n        const response = await api.get(`jokes/search?query=${searchJoke}`)\r\n        setResultSearch(response.data.result)\r\n        if(response.status === 200 ){\r\n            setIsLoad(false)\r\n        } \r\n    }\r\n\r\n    async function handleJokeByCategory(e: string){\r\n        setIsLoad(true)\r\n        const response = await api.get(`jokes/random?category=${e}`)\r\n        setCategorySelected(response.data)\r\n        if( response.status === 200 ){ \r\n            setIsLoad(false)\r\n        } \r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <HomeContainer>\r\n            <h2>Categories</h2>\r\n            \r\n            <div className=\"categories\">\r\n                <ul>\r\n                { categoriesJoke.map( (joke, index) => (\r\n                    <li key={index} onClick={ () => handleJokeByCategory(joke) }>{joke}</li>\r\n                ))}\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"input-group\">\r\n            <h2>Find Joke</h2>\r\n                <input type=\"text\" onChange={ e => setSearchJoke(e.target.value)} />\r\n                <button type=\"submit\" onClick={handleJokes}> Find joke</button>\r\n\r\n            </div>\r\n            <h1>Find results for:</h1>\r\n            <div className=\"joker\">\r\n                { isLoad ? <img src={LoadGif} alt=\"load\"/> : resultSearch.map( result => (\r\n                    <div key={result.id}>\r\n                        <img src={result.icon_url} alt={result.value}/>\r\n                        <h3>{result.value}</h3>\r\n                    </div>\r\n                )) }\r\n\r\n\r\n            </div>\r\n            <div className=\"group-categorias\">\r\n                <img src={categorySelected?.icon_url} alt={categorySelected?.value}/>\r\n                <h3>{categorySelected?.value}</h3>\r\n            </div>  \r\n            \r\n        \r\n        </HomeContainer>\r\n    );\r\n}\r\n\r\nexport default Home;","C:\\Users\\lucas\\OneDrive\\Área de Trabalho\\Gama\\chucknorris2.1\\src\\pages\\Home\\style.ts",[],"C:\\Users\\lucas\\OneDrive\\Área de Trabalho\\Gama\\chucknorris2.1\\src\\service\\api.ts",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":4,"column":8,"nodeType":"37","messageId":"38","endLine":4,"endColumn":13},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"@typescript-eslint/no-unused-vars","'Chuck' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]